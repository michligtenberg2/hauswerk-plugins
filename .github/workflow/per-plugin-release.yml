name: Per Plugin Release

on:
  push:
    paths:
      - 'official/**'
  workflow_dispatch:

jobs:
  release-each-plugin:
    runs-on: ubuntu-latest
    steps:
      - name: üßæ Repo klonen
        uses: actions/checkout@v3

      - name: üêç Python installeren
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: üîÅ Verwerk plugins afzonderlijk
        run: |
          import os, json, zipfile, subprocess

          plugins_dir = "official"
          out_dir = "dist"
          repo = os.environ["GITHUB_REPOSITORY"]

          os.makedirs(out_dir, exist_ok=True)
          plugins = []

          for name in os.listdir(plugins_dir):
              folder = os.path.join(plugins_dir, name)
              if not os.path.isdir(folder):
                  continue

              meta = {
                  "name": name,
                  "version": "1.0",
                  "description": "(geen beschrijving opgegeven)",
                  "tags": [],
                  "verified": True,
                  "rating": 0,
                  "preview": "preview.jpg"
              }

              meta_path = os.path.join(folder, "metadata.json")
              if os.path.exists(meta_path):
                  try:
                      with open(meta_path) as f:
                          user_meta = json.load(f)
                          meta.update(user_meta)
                  except Exception as e:
                      print(f"‚ö†Ô∏è Waarschuwing: Fout bij lezen van {meta_path}: {e}")

              version = meta["version"]
              tag = f"{name}-v{version}"
              zip_name = f"{name}.zip"
              zip_path = os.path.join(out_dir, zip_name)

              with zipfile.ZipFile(zip_path, "w") as zipf:
                  for root, _, files in os.walk(folder):
                      for file in files:
                          full = os.path.join(root, file)
                          rel = os.path.relpath(full, folder)
                          zipf.write(full, os.path.join(name, rel))

              subprocess.run(["gh", "release", "delete", tag, "-y"], check=False)
              subprocess.run([
                  "gh", "release", "create", tag, zip_path,
                  "--title", f"{meta['name']} {version}",
                  "--notes", meta["description"]
              ], check=True)

              plugins.append({
                  "name": meta["name"],
                  "description": meta["description"],
                  "tags": meta["tags"],
                  "verified": meta["verified"],
                  "rating": meta["rating"],
                  "path": f"https://github.com/{repo}/releases/download/{tag}",
                  "preview": meta["preview"],
                  "zip": zip_name
              })

          with open("plugins.json", "w") as f:
              json.dump(plugins, f, indent=2)
        shell: python
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üîÅ Commit plugins.json
        run: |
          git config user.name github-actions
          git config user.email actions@github.com
          git add plugins.json
          git commit -m "üîÑ Update plugins.json [auto]" || echo "No changes"
          git push || echo "Nothing to push"
